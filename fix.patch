 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/chat.py b/chat.py
index 2a210d6a39069fed8107deb396515292d028b473..6ab26e26fea69ec353ecdc78ca1c7f4dc31ad49e 100644
--- a/chat.py
+++ b/chat.py
@@ -3,114 +3,121 @@ import logging
 import os
 import sys
 import pyperclip # Добавляем импорт для работы с буфером обмена
 
 import dearpygui.dearpygui as dpg
 import conparser as cp
 
 logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] %(message)s')
 logger = logging.getLogger(__name__)
 
 
 OPENROUTER_API_KEY = cp.config['SETTINGS']['openrouterapikey']
 
 SYSTEM_PROMPT_FILE = "system_prompt.txt"
 DEFAULT_SYSTEM_PROMPT = (
     "Ты - игрок в кс2. Ограничивай ответ до 120 символов. "
 )
 
 try:
     with open(SYSTEM_PROMPT_FILE, encoding="utf-8") as f:
         SYSTEM_PROMPT = f.read().strip()
 except FileNotFoundError:
     logger.debug("System prompt file not found, using default")
     SYSTEM_PROMPT = DEFAULT_SYSTEM_PROMPT
 
+# История диалога для отправки полным контекстом в OpenRouter
+conversation_history = [{"role": "system", "content": SYSTEM_PROMPT}]
+
 class Status():
     running = False
 
 
 def debug_log(text: str):
     if dpg.does_item_exist("debug_console"):
         current = dpg.get_value("debug_console")
         dpg.set_value("debug_console", f"{text}\n{current}")
         dpg.set_y_scroll("Debug Console", 0)
 
 
 def set_status(sender, app_data, user_data):
     if Status.running == False:
         dpg.configure_item("start_button", label="Stop")
         dpg.set_value(user_data, "Running: True")
         logger.debug("Bot started")
         debug_log("[INFO] Bot started")
 
     elif Status.running == True:
         dpg.configure_item("start_button", label="Start")
         dpg.set_value(user_data, "Running: False")
         logger.debug("Bot stopped")
         debug_log("[INFO] Bot stopped")
 
     Status.running = not Status.running
 
 
 def save_config():
     cp.config['SETTINGS']['blacklisted_usernames'] = dpg.get_value("usernames")
     cp.config['SETTINGS']['gameconlogpath'] = dpg.get_value("conlog")
     cp.config['SETTINGS']['chatkey'] = dpg.get_value("chat_keybind")
     with open(cp.CONFIG_FILE, 'w') as configfile:
         cp.config.write(configfile)
     logger.debug("Configuration saved")
 
 
 def openrouter_interact(user: str, message: str, prefix: str = "", content=SYSTEM_PROMPT):
     logger.debug("Sending to OpenRouter: %s -> %s", user, message)
     prefix_text = f"{prefix} " if prefix else ""
     debug_log(f"> {prefix_text}{user}: {message}")
     message = f"I'm {prefix_text}{user}, {message}"
 
-    messages = [{"role": "system", "content": content}, {"role": "user", "content": message}]
+    global conversation_history
+    conversation_history.append({"role": "user", "content": message})
+
+    messages = conversation_history
     data = {
         "model": "openai/gpt-4.1-mini",
         "messages": messages,
     }
     headers = {
         "Authorization": f"Bearer {OPENROUTER_API_KEY}",
         "HTTP-Referer": "https://github.com/ANDRYBAS/cs2chatgpt",
         "X-Title": "Chat-Strike",
         "Content-Type": "application/json",
     }
 
     try:
         response = requests.post(
             "https://openrouter.ai/api/v1/chat/completions",
             headers=headers,
             json=data,
             timeout=30,
         )
         logger.debug("OpenRouter status: %s", response.status_code)
         response.raise_for_status()
         reply = response.json()["choices"][0]["message"]["content"]
+        conversation_history.append({"role": "assistant", "content": reply})
         logger.debug("Received from OpenRouter: %s", reply)
         debug_log(f"< {reply}")
         return reply
     except Exception as exc:
         logger.exception("OpenRouter request failed: %s", exc)
         return ""
 
 
 def main():
     logfile = None
     username = ""
     message = ""
     game = cp.detect_game()
     logger.debug("Detected game: %s", game)
 
     
 
     dpg.create_context()
     dpg.create_viewport(title='Chat-Strike', width=600, height=500)
 
     if sys.platform.startswith('win'):
         # Попробуем подобрать стандартный моноширинный шрифт с поддержкой кириллицы
         win_dir = os.environ.get('WINDIR', 'C:\\Windows')
         for fname in ("consola.ttf", "lucon.ttf", "cour.ttf"):
             font_path = os.path.join(win_dir, "Fonts", fname)
 
EOF
)