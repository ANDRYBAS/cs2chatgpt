 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/chat.py b/chat.py
index 0b514338fd6205b88c374f60c1e654a55fe3bfe4..aedb9c3530dc6a84470507ec3ded1ececee0c7c9 100644
--- a/chat.py
+++ b/chat.py
@@ -107,51 +107,55 @@ def openrouter_interact(user: str, message: str, prefix: str = ""):
             json=data,
             timeout=30,
         )
         logger.debug("OpenRouter status: %s", response.status_code)
         response.raise_for_status()
         reply = response.json()["choices"][0]["message"]["content"]
         conversation_history.append({"role": "assistant", "content": reply})
         _trim_history()
         logger.debug("Received from OpenRouter: %s", reply)
         debug_log(f"< {reply}")
         return reply
     except Exception as exc:
         logger.exception("OpenRouter request failed: %s", exc)
         if conversation_history:
             conversation_history.pop()
         return ""
 
 
 def reset_history():
     conversation_history.clear()
     conversation_history.append({"role": "system", "content": SYSTEM_PROMPT})
     debug_log("[INFO] history reset")
 
 
 def show_history():
-    text = "\n".join(f"{m['role']}: {m['content']}" for m in conversation_history)
+    messages = list(conversation_history)
+    if messages and messages[0].get("role") == "system":
+        messages = messages[1:]
+    messages = list(reversed(messages))
+    text = "\n".join(f"{m['role']}: {m['content']}" for m in messages)
     print(text)
     debug_log(text)
 
 
 def main():
     logfile = None
     username = ""
     message = ""
     game = cp.detect_game()
     logger.debug("Detected game: %s", game)
 
     
 
     dpg.create_context()
     dpg.create_viewport(title='Chat-Strike', width=600, height=600)
 
     if sys.platform.startswith('win'):
         # Попробуем подобрать стандартный моноширинный шрифт с поддержкой кириллицы
         win_dir = os.environ.get('WINDIR', 'C:\\Windows')
         for fname in ("consola.ttf", "lucon.ttf", "cour.ttf"):
             font_path = os.path.join(win_dir, "Fonts", fname)
             if os.path.exists(font_path):
                 with dpg.font_registry():
                     with dpg.font(font_path, 14) as default_font:
                         dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
 
EOF
)