 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/conparser.py b/conparser.py
index a1375229acb5167917fa4898ae0b597b5ef83056..d759631238f66a8159d9269078138e200114e904 100644
--- a/conparser.py
+++ b/conparser.py
@@ -136,53 +136,59 @@ def parse_log(game, line: str):
     message = parsed_log[1]
 
     logger.debug(
         "Parsed line '%s' -> %s",
         line.strip(),
         [username, message, chat_type, prefix, is_dead]
     )
 
     return ParsedLog(username, message, chat_type, prefix, is_dead)
 
 
 
 
 
 def rt_file_read(file: __file__):
     """Reads console.log in real time and yields new lines."""
     line = file.readline()
     if not line:
         # небольшая пауза, чтобы не крутить цикл на 100%
         time.sleep(0.01)
     return line
 
 
 def sim_key_presses(text: str, key: str = CHAT_KEY):
     """Send a chat message using clipboard paste to avoid stray key presses."""
-    keyboard.press_and_release(key)
-    time.sleep(0.05)
 
-    prev_clip = pyperclip.paste()
-    pyperclip.copy(text)
+    blocked = ['w', 'a', 's', 'd']
+    for k in blocked:
+        keyboard.block_key(k)
 
-    # replace any accidental input (e.g. held movement keys)
-    keyboard.press_and_release('ctrl+a')
-    time.sleep(0.01)
-    keyboard.press_and_release('ctrl+v')
-    time.sleep(0.05)
-    keyboard.press_and_release('enter')
+    try:
+        keyboard.press_and_release(key)
+        time.sleep(0.05)
 
-    # restore previous clipboard contents
-    pyperclip.copy(prev_clip)
+        prev_clip = pyperclip.paste()
+        pyperclip.copy(text)
+
+        keyboard.press_and_release('ctrl+a')
+        time.sleep(0.01)
+        keyboard.press_and_release('ctrl+v')
+        time.sleep(0.05)
+        keyboard.press_and_release('enter')
+    finally:
+        pyperclip.copy(prev_clip)
+        for k in blocked:
+            keyboard.unblock_key(k)
 
 
 def _win32_write(text: str):
     """Fallback input using Win32 API for games that ignore keyboard.write."""
     import ctypes
 
     user32 = ctypes.windll.user32
     for char in text:
         vk = user32.VkKeyScanW(ord(char)) & 0xFF
         user32.keybd_event(vk, 0, 0, 0)
         user32.keybd_event(vk, 0, 2, 0)
 
 
 
EOF
)